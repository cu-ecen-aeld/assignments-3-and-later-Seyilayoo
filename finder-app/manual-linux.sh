#!/bin/bash
# Script outline to install and build kernel.
# Author: Siddhant Jajoo.
#assignment 3

set -e
set -u

OUTDIR=/tmp/aeld
KERNEL_REPO=git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
KERNEL_VERSION=v5.1.10
BUSYBOX_VERSION=1_33_1
FINDER_APP_DIR=$(realpath $(dirname $0))
ARCH=arm64
CROSS_COMPILE=aarch64-none-linux-gnu-

if [ $# -lt 1 ]
then
	echo "Using default directory ${OUTDIR} for output"
else
	OUTDIR=$1
	echo "Using passed directory ${OUTDIR} for output"
fi

mkdir -p ${OUTDIR}

cd "$OUTDIR"
if [ ! -d "${OUTDIR}/linux-stable" ]; then
    #Clone only if the repository does not exist.
	echo "CLONING GIT LINUX STABLE VERSION ${KERNEL_VERSION} IN ${OUTDIR}"
	git clone --depth 1 --single-branch --branch "${KERNEL_VERSION}" "$KERNEL_REPO" linux-stable
fi
if [ ! -e ${OUTDIR}/linux-stable/arch/${ARCH}/boot/Image ]; then
    cd linux-stable
    echo "Checking out version ${KERNEL_VERSION}"
    git checkout ${KERNEL_VERSION}


#patch
#wget https://github.com/torvalds/linux/commit/e33a814e772cdc36436c8c188d8c42d019fda639.diff
#git apply e33a814e772cdc36436c8c188d8c42d019fda639.diff

    # TODO: Add your kernel build steps here
# export PATH=$PATH:${XCOMPILER_PATH}/bin/
    make ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} mrproper # Clean make autogenerated files
    make ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} defconfig # configure for virt target
    make -j4  ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} all # generates image under arch/${ARCH}/boot/
    make ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} modules # Build modules
    make ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} dtbs # build device tree
fi

echo "Adding the Image in outdir"
cp ${OUTDIR}/linux-stable/arch/${ARCH}/boot/Image ${OUTDIR}


echo "Creating the staging directory for the root filesystem"
cd "$OUTDIR"
if [ -d "${OUTDIR}/rootfs" ]
then
	echo "Deleting rootfs directory at ${OUTDIR}/rootfs and starting over"
    sudo rm  -rf ${OUTDIR}/rootfs
fi



# TODO: Create necessary base directories
mkdir ${OUTDIR}/rootfs
cd ${OUTDIR}/rootfs

mkdir -p bin dev etc home lib lib64 proc sbin sys tmp usr var
mkdir -p usr/bin usr/lib usr/sbin
mkdir -p var/log



cd "$OUTDIR"
if [ ! -d "${OUTDIR}/busybox" ]
then
git clone git://busybox.net/busybox.git
    cd busybox
    git checkout ${BUSYBOX_VERSION}
    # TODO:  Configure busybox
make distclean
make defconfig
else
    cd busybox
fi

# TODO: Make and install busybox
#Make
make ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE}
#Install
make CONFIG_PREFIX=${OUTDIR}/rootfs ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} install


#Change directory to root file system to add library dependencies from sysroot of cross compiler to lib64 of rootfs
cd ${OUTDIR}/rootfs

echo "Library dependencies"
${CROSS_COMPILE}readelf -a bin/busybox | grep "program interpreter"
${CROSS_COMPILE}readelf -a bin/busybox | grep "Shared library"

# TODO: Add library dependencies to rootfs
SYSROOT=$(${CROSS_COMPILE}gcc -print-sysroot)
cp ${SYSROOT}/lib/ld-linux-aarch64.so.1 lib
cp ${SYSROOT}/lib64/libm.so.6 lib64
cp ${SYSROOT}/lib64/libresolv.so.2 lib64
cp ${SYSROOT}/lib64/libc.so.6 lib64


# TODO: Make device nodes
#cd "${OUTDIR}/rootfs"
sudo mknod -m 666 dev/null c 1 3
sudo mknod -m 600 dev/console c 5 1 

# TODO: Clean and build the writer utility
cd ${FINDER_APP_DIR}
make clean
CROSS_COMPILE=${CROSS_COMPILE} make


## TODO: Copy the finder related scripts and executables to the /home directory
# on the target rootfs
cp $FINDER_APP_DIR/writer ${OUTDIR}/rootfs/home
cp $FINDER_APP_DIR/finder.sh ${OUTDIR}/rootfs/home
cp -r $FINDER_APP_DIR/conf/ ${OUTDIR}/rootfs/home
cp $FINDER_APP_DIR/finder-test.sh ${OUTDIR}/rootfs/home
cp $FINDER_APP_DIR/autorun-qemu.sh ${OUTDIR}/rootfs/home



# TODO: Chown the root directory
cd ${OUTDIR}/rootfs
sudo chown -R root:root *


# TODO: Create initramfs.cpio.gz
find . | cpio -H newc -ov --owner root:root > ${OUTDIR}/initramfs.cpio
gzip -f initramfs.cpio

#echo "Completed building rootfs and initramfs"
